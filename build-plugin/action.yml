name: "Grafana Build Plugin"
description: "Builds a Grafana plugin"

outputs:
  archive:
    description: "The path to the plugin archive (zip)."
    value: ${{ steps.package-plugin.outputs.archive }}
  archive-sha1sum:
    description: "The path to the plugin archive sha1sum."
    value: ${{ steps.package-plugin.outputs.archive-sha1sum }}

inputs:
  token:
    description: "Token for the repository. Can be passed in using `{{ secrets.GITHUB_TOKEN }}`."
    required: false
    default: "${{ github.token }}"
  policy_token:
    description: "Grafana access policy token. https://grafana.com/developers/plugin-tools/publish-a-plugin/sign-a-plugin#generate-an-access-policy-token"
    required: false
    default: ""
  grafana_token:
    description: "[deprecated] Grafana API Key to sign a plugin. Prefer `policy_token`."
    required: false
    default: ""
  go-version:
    description: "Version of go"
    required: false
    default: "1.21"
  node-version:
    description: "Version of node"
    required: false
    default: "20"
  backend-target:
    type: choice
    description: "Backend target for the plugin backend build"
    options:
      - build:backend
      - build:darwin
      - build:darwinARM64
      - build:debug
      - build:debugDarwinAMD64
      - build:debugDarwinARM64
      - build:debugLinuxAMD64
      - build:debugLinuxARM64
      - build:debugWindowsAMD64
      - build:linux
      - build:linuxARM
      - build:linuxARM64
      - build:windows
      - buildAll
    required: false
    default: "buildAll"
  attestation:
    description: "Create a verifiable attestation for the plugin using Github OIDC. Requires id-token: write and attestations: writes permissions"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Package plugin
      id: "package-plugin"
      uses: grafana/plugin-actions/package-plugin@main
      with:
        policy_token: ${{ inputs.policy_token }}
        node-version: "${{ inputs.node-version }}"
        go-version: "${{ inputs.go-version }}"
        backend-target: "${{ inputs.backend-target }}"

    - name: Get plugin metadata
      id: metadata
      run: |
        echo "github-tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Print outputs from package-plugin
      shell: bash
      run: |
        printf "archive=%s\n" "${{ steps.package-plugin.outputs.archive }}"
        printf "archive-sha1sum=%s\n" "${{ steps.package-plugin.outputs.archive-sha1sum }}"
        printf "plugin-id=%s\n" "${{ steps.package-plugin.outputs.plugin-id }}"
        printf "plugin-version=%s\n" "${{ steps.package-plugin.outputs.plugin-version }}"

    - name: Generate Changelog
      id: generate-changelog
      shell: bash
      run: |
        CURRENT_VERSION="v${{ steps.package-plugin.outputs.plugin-version }}"
        CURRENT_DATE=$(date +"%Y-%m-%d")
        
        # Get commit messages since the last tag
        if git rev-parse --verify --quiet "$(git describe --abbrev=0 --tags 2>/dev/null)"; then
          LAST_TAG=$(git describe --abbrev=0 --tags)
          echo "Getting changes since last tag: $LAST_TAG"
          COMMITS=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
        else
          echo "No previous tags found. Including all commits."
          COMMITS=$(git log --pretty=format:"- %s")
        fi
        
        # Create release notes content
        echo "## $CURRENT_VERSION ($CURRENT_DATE)" > release_notes.md
        echo "" >> release_notes.md
        
        # Categorize commits (optional: you can enhance this to categorize commits by type)
        echo "### Changes" >> release_notes.md
        echo "$COMMITS" >> release_notes.md
        echo "" >> release_notes.md
        
        # Save the output for later use
        echo "path=release_notes.md" >> $GITHUB_OUTPUT
        
        # Update CHANGELOG.md
        if [ -f "CHANGELOG.md" ]; then
          echo "Updating existing CHANGELOG.md..."
          # Create a new changelog with the new entry at the top
          echo "# Changelog" > temp_changelog.md
          echo "" >> temp_changelog.md
          cat release_notes.md >> temp_changelog.md
          echo "" >> temp_changelog.md
          # Append existing changelog without the header
          tail -n +3 CHANGELOG.md >> temp_changelog.md
          mv temp_changelog.md CHANGELOG.md
        else
          echo "Creating new CHANGELOG.md..."
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          cat release_notes.md >> CHANGELOG.md
        fi
        
        # Add version metadata section if it doesn't exist
        if ! grep -q "## Version Metadata" CHANGELOG.md; then
          echo "" >> CHANGELOG.md
          echo "## Version Metadata" >> CHANGELOG.md
          echo "This section tracks version availability in the Grafana catalog." >> CHANGELOG.md
        fi
        
        # Add the current version to the metadata section with catalog status
        if [ "${{ inputs.catalog_release }}" == "true" ]; then
          sed -i "/## Version Metadata/a\\- $CURRENT_VERSION: Released to catalog on $CURRENT_DATE âœ“" CHANGELOG.md
        else
          sed -i "/## Version Metadata/a\\- $CURRENT_VERSION: Released on $CURRENT_DATE (not in catalog)" CHANGELOG.md
        fi
        
        # Output the path to the updated changelog
        echo "changelog_path=CHANGELOG.md" >> $GITHUB_OUTPUT

    - name: Read changelog
      id: changelog
      run: |
        if [ -f "CHANGELOG.md" ]; then
          echo "Changelog found, extracting release notes..."
          awk '/^## / {s++} s == 1 {print}' CHANGELOG.md > release_notes.md
          # Check if extraction produced any content
          if [ -s release_notes.md ]; then
            echo "Release notes extracted successfully."
          else
            echo "Warning: Could not extract release notes from CHANGELOG.md in the expected format."
            echo "Generating default release notes..."
            echo "## v${{ steps.package-plugin.outputs.plugin-version }}" > release_notes.md
            echo "" >> release_notes.md
            echo "This release includes the latest updates for the plugin." >> release_notes.md
          fi
        else
          echo "No CHANGELOG.md found. Generating default release notes..."
          echo "## v${{ steps.package-plugin.outputs.plugin-version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "This release includes the latest updates for the plugin." >> release_notes.md
        fi
        echo "path=release_notes.md" >> $GITHUB_OUTPUT
      shell: bash

    - name: Check package version
  id: version-check
  shell: bash
  run: |
    PLUGIN_VERSION="v${{ steps.package-plugin.outputs.plugin-version }}"
    TAG_VERSION="${{ steps.metadata.outputs.github-tag }}"
    
    if [ "$PLUGIN_VERSION" != "$TAG_VERSION" ]; then
      echo "::warning::Version mismatch detected: Plugin version ($PLUGIN_VERSION) doesn't match tag name ($TAG_VERSION)"
      echo "version_mismatch=true" >> $GITHUB_OUTPUT
    else
      echo "Versions match: $PLUGIN_VERSION"
      echo "version_mismatch=false" >> $GITHUB_OUTPUT
    fi

    - name: Generate artifact attestation
      if: ${{ inputs.attestation == 'true' }}
      id: attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: ${{ steps.package-plugin.outputs.archive }}

    - name: Commit updated changelog
      uses: EndBug/add-and-commit@v9
      with:
        add: 'CHANGELOG.md'
        message: 'docs: update changelog for ${{ steps.package-plugin.outputs.plugin-version }} [skip ci]'
        default_author: github_actions
        push: true

    - name: Create Github release
      uses: softprops/action-gh-release@v2
      with:
        draft: true
        generate_release_notes: true
        token: ${{ inputs.token }}
        files: |
          ./${{ steps.package-plugin.outputs.archive }}
          ./${{ steps.package-plugin.outputs.archive-sha1sum }}
        body: |
          **This Github draft release has been created for your plugin.**

          _Note: if this is the first release for your plugin please consult the [distributing-your-plugin section](https://github.com/${{github.repository}}/blob/main/README.md#distributing-your-plugin) of the README_

          If you would like to submit this release to Grafana please consider the following steps:

          - Check the Validate plugin step in the [release workflow](https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}) for any warnings that need attention
          - **Edit this draft release**, adjust these notes accordingly and click **Publish Release**
          - Navigate to https://grafana.com/auth/sign-in/ to sign into your account
          - Once logged in click **My Plugins** in the admin navigation
          - Click the **Submit Plugin** button
          - Fill in the Plugin Submission form:
            - Paste this [.zip asset link](https://github.com/${{ github.repository }}/releases/download/v${{ steps.package-plugin.outputs.plugin-version }}/${{ steps.package-plugin.outputs.archive }}) in the Plugin URL field
            - Paste this [.zip.sha1 link](https://github.com/${{ github.repository }}/releases/download/v${{ steps.package-plugin.outputs.plugin-version }}/${{ steps.package-plugin.outputs.archive-sha1sum }}) in the SHA1 field

          If the links above are not working, you must first edit this draft release and publish it.

           ${{ inputs.attestation == 'true' && format('This build has been attested. You can view the attestation details [here]({0})', steps.attestation.outputs.attestation-url) }}
