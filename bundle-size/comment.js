// @ts-check

/** @typedef {import('./compareStats').AssetDiff} AssetDiff */
/** @typedef {import('./compareStats').DiffResult} DiffResult */
/** @typedef {import('./compareStats').EntryDiffResult} EntryDiffResult */

const prMessageUpdate =
  "Whenever this PR is updated, this comment will update to reflect the latest changes.";

const prMessageWelcome = `
Hello! ðŸ‘‹ This comment was generated by a Github Action to help you and reviewers understand the impact of your PR on frontend bundle sizes.
`;

/**
 * @param {string} workingDirectory
 */
function shouldIgnoreWorkingDirectory(workingDirectory) {
  return (
    workingDirectory == null ||
    workingDirectory === "." ||
    workingDirectory === "./"
  );
}

/**
 * @param {string} workingDirectory
 */
function getPrMessageSymbol(workingDirectory) {
  const workingDirectoryPart = shouldIgnoreWorkingDirectory(workingDirectory)
    ? ""
    : `${workingDirectory}`;
  return `<!-- grafana-plugin-actions-bundle-size-comment-${workingDirectoryPart} -->`;
}

/**
 * @param {string} workingDirectory
 */
function getPrMessageTitle(workingDirectory) {
  const base = `### Bundle Size Changes`;
  return shouldIgnoreWorkingDirectory(workingDirectory)
    ? base
    : `${base} - ${workingDirectory}`;
}

/**
 * @param {string} string
 */
function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

/**
 * @param {number} bytes
 */
function formatBytes(bytes) {
  if (bytes === 0) {
    return "0 Bytes";
  }
  const absBytes = Math.abs(bytes);
  const k = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(absBytes) / Math.log(k));
  return parseFloat((absBytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
}

/**
 * @param {number} number
 */
function getPercentageString(number) {
  if ([Infinity, -Infinity].includes(number)) {
    return "-";
  }

  const absValue = Math.abs(number);
  const value = absValue.toFixed(2);
  const sign = number < 0 ? "-" : "+";

  return `${number === 0 ? "" : sign}${value}%`;
}

/**
 * @param {AssetDiff} assetDiff
 */
function createDiffCell(assetDiff) {
  const formattedNewSize = formatBytes(assetDiff.new.size);
  const value = assetDiff.diff;
  if (value === 0) {
    return formattedNewSize;
  }
  const sign = value < 0 ? "-" : "+";

  return `${formattedNewSize} (${value === 0 ? "" : sign}${formatBytes(
    value
  )})`;
}

/**
 * @param {AssetDiff} assetDiff
 */
function printAssetTableRow(assetDiff) {
  return `| ${assetDiff.name} | ${createDiffCell(
    assetDiff
  )} | ${getPercentageString(assetDiff.diffPercentage)} |`;
}

/**
 * @param {string} col1
 * @param {string} col2
 * @param {string} col3
 */
function printAssetTableHeader(col1 = "Name", col2 = "Size", col3 = "% Diff") {
  return `| ${col1} | ${col2} | ${col3} |
| --- | --- | --- |`;
}

/**
 * @param {DiffResult} assetDiff
 */
function printAssetTables(assetDiff) {
  const result = ["added", "removed", "bigger", "smaller"]
    .map((assetDiffField) => {
      const assets = assetDiff[assetDiffField];
      const title = capitalize(assetDiffField);
      if (assets.length === 0) {
        return `**${title}**\n\nNo assets were ${assetDiffField}\n`;
      }

      return `**${title}**\n\n
${printAssetTableHeader()}
${assets.map((assetDiff) => printAssetTableRow(assetDiff)).join("\n")}
`;
    })
    .join("\n\n");

  return result;
}

/**
 * @param {DiffResult} modulesDiff
 */
function printChunkModulesTable(modulesDiff) {
  const result = ["added", "removed", "bigger", "smaller"];
  return result
    .map((moduleDiffField) => {
      const modules = modulesDiff[moduleDiffField];
      const title = capitalize(moduleDiffField);
      if (modules.length === 0) {
        return `**${title}**\n\nNo modules were ${moduleDiffField}\n`;
      }

      return `**${title}**\n\n
${printAssetTableHeader()}
${modules.map((moduleDiff) => printAssetTableRow(moduleDiff)).join("\n")}
`;
    })
    .join("\n\n");
}

/**
 * @param {DiffResult} assetsDiff
 * @param {DiffResult} modulesDiff
 * @param {EntryDiffResult} entriesDiff
 */
function getComment(assetsDiff, modulesDiff, entriesDiff, workingDirectory) {
  return `${getPrMessageSymbol(workingDirectory)}
${getPrMessageTitle(workingDirectory)}

${prMessageWelcome}

${prMessageUpdate}

${printAssetTableHeader("EntryPoint")}
${entriesDiff.entries.map((entry) => printAssetTableRow(entry)).join("\n")}

${printAssetTableHeader("Files", "Total bundle size")}
${printAssetTableRow(assetsDiff.total)}

<details>
<summary>View detailed bundle information</summary>
<div>

${printAssetTables(assetsDiff)}

</div>
</details>

${
  modulesDiff
    ? `<details>
<summary>View module information</summary>
<div>

${printChunkModulesTable(modulesDiff)}

</div>
</details>`
    : ""
}
`;
}
function getBelowThresholdComment(
  diffPercentage,
  diffThreshold,
  workingDirectory
) {
  return `${getPrMessageSymbol(workingDirectory)}
${getPrMessageTitle(workingDirectory)}

${prMessageWelcome}

Great job! Bundle size increase of ${diffPercentage}% is now below threshold of ${diffThreshold}%.

${prMessageUpdate}
`;
}

module.exports = {
  getComment,
  getBelowThresholdComment,
  getPrMessageSymbol,
};
