name: "Levitate is compatible"
description: "Check if your grafana plugin code is compatible with grafana latest APIs"

inputs:
  module:
    required: true
    description: "Path to your plugin module.ts file. Usually ./src/module.ts"
  comment-pr:
    description: "If running the action inside a pull_request write a comment with the check output. yes or no"
    default: "yes"
    required: false
  skip-comment-if-compatible:
    description: "If comment-pr is enabled, skip the message if the result is favorable. yes or no. Requires \"pull-requests: write permissions\""
    default: "no"
    required: false
  fail-if-incompatible:
    description: "Fail the job if levitate finds incompatibilities. yes or no"
    default: "no"
    required: false
  targets:
    description: "List of packages to test compatibility against"
    default: "@grafana/data,@grafana/ui,@grafana/runtime,@grafana/schema,@grafana/e2e-selectors,@grafana/experimental"
    required: false

runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: 22
    - id: run-levitate
      run: |
        # RUN levitate is-compatible. Save the output to .levitate_output
        npx --yes @grafana/levitate@latest is-compatible --path $LEVITATE_PATH --target $LEVITATE_TARGETS --markdown | tee .levitate_output || true
        # Detect the exit code based on the levitate output
        CODE=$(if [[ -n $(cat .levitate_output | grep "not fully compatible") ]]; then echo 1; else echo 0; fi)
        # Capture levitate output in an ENV variable
        IS_COMPATIBLE=$(cat .levitate_output)
        # Save outputs in github contexts
        echo "is-compatible-stdout<<EOF" >> $GITHUB_OUTPUT
        echo "$IS_COMPATIBLE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        echo "is-compatible-exit-code=$CODE" >> $GITHUB_OUTPUT
      shell: "bash"
      env:
        LEVITATE_PATH: ${{ inputs.module }}
        LEVITATE_TARGETS: ${{ inputs.targets }}

    # find the current PR (if running in one)
    - uses: jwalton/gh-find-current-pr@89ee5799558265a1e0e31fab792ebb4ee91c016b # v1.3.3
      id: finder
      if: (inputs.comment-pr == 'yes' && steps.run-levitate.outputs.code == 1) || (inputs.comment-pr == 'yes' && inputs.skip-comment-if-compatible == 'no')

    # write a comment with levitate output
    - uses: marocchino/sticky-pull-request-comment@773744901bac0e8cbb5a0dc842800d45e9b2b405 # v2.9.4
      if: (inputs.comment-pr == 'yes' && steps.run-levitate.outputs.code == 1) || (inputs.comment-pr == 'yes' && inputs.skip-comment-if-compatible == 'no')
      with:
        number: ${{ steps.finder.outputs.pr }}
        message: |
          Levitate is-compatible report:

          ${{ steps.run-levitate.outputs.is-compatible-stdout }}
    - if: inputs.fail-if-incompatible == 'yes' && steps.run-levitate.outputs.is-compatible-exit-code == 1
      run: |
        echo "Possible incompatibilities found. Check Levitate output for further information"
        exit 1
      shell: "bash"
