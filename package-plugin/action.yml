name: "Grafana Package Plugin"
description: "Packages a Grafana plugin"

outputs:
  archive:
    description: "The path to the plugin archive (zip)."
    value: ${{ steps.metadata.outputs.archive }}
  archive-sha1sum:
    description: "The path to the plugin archive sha1sum."
    value: ${{ steps.metadata.outputs.archive-sha1sum }}
  plugin-id:
    description: "The ID of the plugin."
    value: ${{ steps.metadata.outputs.plugin-id }}
  plugin-version:
    description: "The plugin version."
    value: ${{ steps.metadata.outputs.plugin-version }}

inputs:
  policy_token:
    description: "Grafana access policy token. https://grafana.com/developers/plugin-tools/publish-a-plugin/sign-a-plugin#generate-an-access-policy-token"
    required: false
    default: ""
  go-version:
    description: "Version of go"
    required: false
    default: "1.21"
  node-version:
    description: "Version of node"
    required: false
    default: "20"
  backend-target:
    type: choice
    description: "Backend target for the plugin backend build"
    options:
        - build:backend
        - build:darwin
        - build:darwinARM64
        - build:debug
        - build:debugDarwinAMD64
        - build:debugDarwinARM64
        - build:debugLinuxAMD64
        - build:debugLinuxARM64
        - build:debugWindowsAMD64
        - build:linux
        - build:linuxARM
        - build:linuxARM64
        - build:windows
        - buildAll
    required: false
    default: "buildAll"

runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
      with:
        node-version: "${{ inputs.node-version }}"

    - name: Setup Go environment
      uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
      with:
        go-version: "${{ inputs.go-version }}"

    - name: Install dependencies
      run: ${{ github.action_path }}/pm.sh install
      shell: bash

    - name: Build and test frontend
      run: ${{ github.action_path }}/pm.sh build
      shell: bash

    - name: Check for backend
      id: check-for-backend
      run: |
        if [ -f "Magefile.go" ]
        then
          echo "has-backend=true" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Test backend
      if: steps.check-for-backend.outputs.has-backend == 'true'
      uses: magefile/mage-action@6f50bbb8ea47d56e62dee92392788acbc8192d0b # v3.1.0
      with:
        version: latest
        args: coverage

    - name: Build backend
      if: steps.check-for-backend.outputs.has-backend == 'true'
      uses: magefile/mage-action@6f50bbb8ea47d56e62dee92392788acbc8192d0b # v3.1.0
      with:
        version: latest
        args: "${{ inputs.backend-target }}"

    - name: Warn missing Grafana access policy token
      run: |
        echo Please generate a Grafana access policy token: https://grafana.com/developers/plugin-tools/publish-a-plugin/sign-a-plugin#generate-an-access-policy-token
        echo Once done please follow the instructions found here: https://github.com/${{github.repository}}/blob/main/README.md#using-github-actions-release-workflow
      if: ${{ inputs.policy_token == '' }}
      shell: bash

    - name: Sign plugin
      run: ${{ github.action_path }}/pm.sh sign
      shell: bash
      env:
        GRAFANA_ACCESS_POLICY_TOKEN: ${{ inputs.policy_token }}
        GRAFANA_API_KEY: ${{ inputs.grafana_token }}
      if: ${{ inputs.policy_token != '' }}

    - name: Get plugin metadata
      id: metadata
      run: |
        sudo apt-get install jq

        export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
        export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
        export GRAFANA_PLUGIN_TYPE=$(cat dist/plugin.json | jq -r .type)
        export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip
        export GRAFANA_PLUGIN_ARTIFACT_SHA1SUM=${GRAFANA_PLUGIN_ARTIFACT}.sha1

        echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
        echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
        echo "plugin-type=${GRAFANA_PLUGIN_TYPE}" >> $GITHUB_OUTPUT
        echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT
        echo "archive-sha1sum=${GRAFANA_PLUGIN_ARTIFACT_SHA1SUM}" >> $GITHUB_OUTPUT

        echo "github-tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Package plugin
      id: package-plugin
      run: |
        mv dist $PLUGIN_ID
        zip $PLUGIN_ARCHIVE $PLUGIN_ID -r
        sha1sum $PLUGIN_ARCHIVE | cut -f1 -d' ' > $PLUGIN_ARCHIVE_SHA1SUM
      shell: bash
      env:
        PLUGIN_ID: ${{ steps.metadata.outputs.plugin-id }}
        PLUGIN_ARCHIVE: ${{ steps.metadata.outputs.archive }}
        PLUGIN_ARCHIVE_SHA1SUM: ${{ steps.metadata.outputs.archive-sha1sum }}

    - name: Validate plugin
      run: |
        npx -y @grafana/plugin-validator@latest -sourceCodeUri file://./ $PLUGIN_ARCHIVE
      shell: bash
      env:
        PLUGIN_ARCHIVE: ${{ steps.metadata.outputs.archive }}
